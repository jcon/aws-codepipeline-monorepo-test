AWSTemplateFormatVersion: '2010-09-09'
# *** Change this to something useful for you!
Description: github-codepipeline

Parameters:
  # *** This value must always be passed in when creating / updating stack
  # "NoEcho" is set to true, for security, so token won't be visible when examining the resulting stack
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    MinLength: 40
    MaxLength: 40
    AllowedPattern: '[a-z0-9]*'

  # *** The remaining parameters should either be:
  # - overridden via changing "Default" here (PREFERABLE, since then they're in source control)
  # - or you can pass them in when creating / updating the stack

  # *** The owner of the Github repo for this application.
  GitHubOwner:
    Type: String
    Default: jcon
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepo:
    Type: String
    Default: cicd-test
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubBranch:
    Type: String
    Default: master
    AllowedPattern: "[A-Za-z0-9-]+"

  # *** The stack name for the actual application we're deploying
  ApplicationStackName:
    Type: String
    Default: github-codepipeline-app
    AllowedPattern: "[A-Za-z0-9-]+"

Resources:
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

#  ArtifactBucket:
#    Type: AWS::S3::Bucket

  CacheBucket:
    Type: AWS::S3::Bucket

  CodeBuildSourceCredential:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: !Ref GitHubOAuthToken

  PipelineTriggerCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: S3
        Location: !Ref 'ArtifactsBucket'
        Name: 'build-output.zip'
        NamespaceType: NONE # BUILD_ID (we want to use the same file each time)
        Packaging: ZIP
        Path: 'codebuild'
      Source:
        Type: GITHUB
        Location: https://github.com/jcon/cicd-test.git
        Auth:
          Type: OAUTH
          Resource: !Ref CodeBuildSourceCredential
        BuildSpec: |
          version: 0.2
          phases:
              install:
                  runtime-versions:
                    nodejs: 10
              build:
                  commands:
                    - 'echo doing nothing'
              post_build:
                  commands:
                    - 'echo sucessfully pushed artifacts!'
          artifacts:
              base-directory: .
              files:
                - '**/*'
              discard-paths: no
#          cache:
#              paths:
#                - 'node_modules/*'
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PUSH
#            - Type: BASE_REF
#              Pattern: ^refs/heads/master$
            - Type: FILE_PATH
              Pattern: ^(packages/bar|packages/baz|packages/main1).*$
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Sub "${AWS::StackName}-trigger"
      ServiceRole: !Ref CodeBuildServiceRole
#      Cache:
#        Type: S3
#        Location: !Ref CacheBucket

  ArtifactBucketPolicy:
    Description: Setting Amazon S3 bucket policy for AWS CodePipeline access
    Properties:
      Bucket: !Ref 'ArtifactsBucket'
      PolicyDocument:
        Id: SSEAndSSLPolicy
        Statement:
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Condition:
            Bool:
              aws:SecureTransport: false
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt
              - CodePipelineRole
              - Arn
            - !GetAtt
              - CodeBuildServiceRole
              - Arn
            - !GetAtt
              - CloudformationRole
              - Arn
          Resource:
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
              - /*
          Sid: WhitelistedGet
        - Action:
          - s3:PutObject
          Effect: Allow
          Principal:
            AWS:
            - !GetAtt
              - CodePipelineRole
              - Arn
            - !GetAtt
              - CodeBuildServiceRole
              - Arn
          Resource:
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
          - !Join
            - ''
            - - 'arn:aws:s3:::'
              - !Ref 'ArtifactsBucket'
              - /*
          Sid: WhitelistedPut
        Version: 2012-10-17
    Type: AWS::S3::BucketPolicy

  ArtifactsBucket:
    DeletionPolicy: Delete
    Description: Creating Amazon S3 bucket for AWS CodePipeline and CodeBuild artifacts
    Properties:
      Tags:
      - Key: Name
        Value: !Join
        - '-'
        - - !Ref 'AWS::StackName'
          - ArtifactsBucket
      VersioningConfiguration:
        Status: Enabled
    Type: AWS::S3::Bucket

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
              install:
                  runtime-versions:
                    nodejs: 10
                  commands:
                    - 'touch .npmignore'
                    - 'npm install -g yarn'
              pre_build:
                  commands:
                    - 'yarn install'
              build:
                  commands:
                    - 'find . -type f'
                    - 'cd packages/main1'
                    - 'yarn build'
              post_build:
                  commands:
                    - 'echo sucessfully pushed artifacts!'
          artifacts:
              base-directory: .
              files:
                - '**/dist/*'
                - '**/node_modules/*'
              discard-paths: no
#          cache:
#              paths:
#                - 'node_modules/*'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole
#      Cache:
#        Type: S3
#        Location: !Ref CacheBucket

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: 1
            Provider: S3
          OutputArtifacts:
          - Name: SourceCode
          Configuration:
            S3Bucket: !Ref ArtifactsBucket
            S3ObjectKey: codebuild/build-output.zip
            PollForSourceChanges: true
          RunOrder: 1
        # - Name: Source
        #   InputArtifacts: []
        #   ActionTypeId:
        #     Category: Source
        #     Owner: ThirdParty
        #     Version: 1
        #     Provider: GitHub
        #   OutputArtifacts:
        #   - Name: SourceCode
        #   Configuration:
        #     Owner: !Ref GitHubOwner
        #     Repo: !Ref GitHubRepo
        #     Branch: !Ref GitHubBranch
        #     PollForSourceChanges: false
        #     OAuthToken: !Ref GitHubOAuthToken
        #   RunOrder: 1
      # Build and Deploy, etc., stages would follow. Here is an example
      - Name: Build
        Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: "1"
              Provider: CodeBuild
            Configuration:
              ProjectName: !Ref CodeBuildProject
            InputArtifacts:
              - Name: SourceCode
            OutputArtifacts:
              - Name: BuildOutput
            RunOrder: 1
#      - Name: Deploy
#        Actions:
#        - Name: CloudFormationDeploy
#          ActionTypeId:
#            Category: Deploy
#            Owner: AWS
#            Provider: CloudFormation
#            Version: '1'
#          InputArtifacts:
#            - Name: SourceCode
#          Configuration:
#            ActionMode: CREATE_UPDATE
#            Capabilities: CAPABILITY_IAM
#            RoleArn: !GetAtt CloudformationRole.Arn
#            StackName: !Ref ApplicationStackName
#            TemplatePath: "infra/application.yml"
#          RunOrder: 1

  # 'GithubWebhook' satisfies two requirements:
  # -- Means that updates are pushed from GitHub, rather than AWS having to poll
  # -- Means we can filter for required changes
#  GithubWebhook:
#    Type: 'AWS::CodePipeline::Webhook'
#    Properties:
#      Authentication: GITHUB_HMAC
#      AuthenticationConfiguration:
#        SecretToken: !Ref GitHubOAuthToken
#      RegisterWithThirdParty: true
#      Filters:
#      - JsonPath: "$.ref"
#        MatchEquals: refs/heads/{Branch}
#      TargetPipeline: !Ref CodePipeline
#      TargetAction: Source
#      TargetPipelineVersion: !GetAtt CodePipeline.Version

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions